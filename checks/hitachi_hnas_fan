#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_hitachi_hnas_fan(info):
    inventory = []
    for clusternode, id, fitted_status, speed_status, speed in info:
        inventory.append( (clusternode + "." + id, None) )
    return inventory

def check_hitachi_hnas_fan(item, _no_params, info):
    rc = 0

    fan_fitted_status_map = ( ("", 3),          # 0
                              ("ok", 0),        # 1
                              ("okIdWrong", 1), # 2
                              ("notFitted", 2), # 3
                              ("unknown", 3),   # 4
                            )

    fan_speed_status_map = ( ("", 3),           # 0
                             ("ok", 0),         # 1
                             ("warning", 1),    # 2
                             ("severe", 2),     # 3
                             ("unknown", 3),    # 4
                           )
    errorstring = ( "", " (!)", " (!!)", "")

    for clusternode, id, fitted_status, speed_status, speed in info:
        if clusternode + "." + id == item:
            fitted_status=int(fitted_status)
            speed_status=int(speed_status)
            speed=int(speed)
            message = "PNode %s Fan %s" % (clusternode, id)

            # check fitted status
            if fitted_status == 0 or fitted_status >= len(fan_fitted_status_map):
                message += " fitted status unidentified %s" % fitted_status
                rc = 3
            else:
                message += " fitted status is %s%s" % ( fan_fitted_status_map[fitted_status][0], errorstring[fan_fitted_status_map[fitted_status][1]] )
                rc = fan_fitted_status_map[fitted_status][1]

            # check speed status
            if speed_status == 0 or speed_status >= len(fan_speed_status_map):
                message += ", speed status unidentified %s" % speed_status
                if rc == 0:
                    rc = 3
                # if rc is already warning or critical, keep it
            else:
                message += ", speed status is %s%s" % ( fan_speed_status_map[speed_status][0], errorstring[fan_speed_status_map[speed_status][1]] )
                if fan_speed_status_map[speed_status][1] == 1:
                    if rc == 2:
                        rc = 2
                    else:
                        rc = 1
                elif fan_speed_status_map[speed_status][1] == 2:
                    rc = 2
                elif fan_speed_status_map[speed_status][1] == 3:
                    if rc == 0:
                        rc = 3

            # report speed
            message += ", speed is %s rpm" % speed
            perfdata = [ ('fanspeed', str(speed) + 'rpm', '',   '',   0, '') ]

            return rc, message, perfdata

    return 3, "No fan %s found" % item

check_info["hitachi_hnas_fan"] = {
    "check_function"        : check_hitachi_hnas_fan,
    "inventory_function"    : inventory_hitachi_hnas_fan,
    "service_description"   : "Fan %s",
    "has_perfdata"          : True,
    "snmp_info"             : (".1.3.6.1.4.1.11096.6.1.1.1.2.1.11.1", [1, 2, 3, 4, 5]),
                              # fanClusterNode, fanIndex, fanFittedStatus, fanSpeedStatus, fanSpeed
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
