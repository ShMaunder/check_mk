#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

stulz_humidity_default_levels = ( 35, 40, 60, 65 )

def inventory_stulz_humidity(info):
    return [ (x[0], "stulz_humidity_default_levels" ) for x in info ]

def check_stulz_humidity(item, params, info):
    for line in info:
        if line[0] == item:
            warnlow, critlow, warnhigh, crithigh = params
            humidity = savefloat(line[1])/10
            state = 0
            msg = ""
            if humidity >= crithigh:
                state = 2
                msg = "to high (Levels Warning/Critical %d/%d) " % ( warnhigh, crithigh )
            elif humidity >= warnhigh:
                state = 1
                msg = "to high (Levels Warning/Critical %d/%d) " % ( warnhigh, crithigh )
            elif humidity <= warnlow and humidity > critlow:
                state = 1
                msg = "to low (Levels Warning/Critical %d/%d) " % ( warnlow, critlow )
            elif humidity <= critlow:
                state = 2
                msg = "to low (Levels Warning/Critical %d/%d) " % ( warnlow, critlow )
            message = " Current Humidity: %.2f%% %s" % ( humidity, msg )
            perf = [ ('humidity', humidity, critlow, warnlow, warnhigh, crithigh ) ]
            return state, message, perf
    return 3, "No information found about the device"

check_info["stulz_humidity"] = {
    "check_function"        : check_stulz_humidity,
    "inventory_function"    : inventory_stulz_humidity,
    "service_description"   : "Humidity %s ",
    "has_perfdata"          : True,
    "group"                 : "humidity",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.29462.10",
    "snmp_info"             : ( ".1.3.6.1.4.1.29462.10.2.1.1.1.1.2.1.1.1194", [ OID_END, 1] ),
}

