#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

dell_chassis_temp_default_levels = ( 60, 80 )

def inventory_dell_chassis_temp(info):
    inventory = []
    if info and len(info[0]) == 3:
        inventory.append( ( "Front Panel", "dell_chassis_temp_default_levels") )
        inventory.append( ( "CMC Ambient", "dell_chassis_temp_default_levels") )
        inventory.append( ( "CMC Processor", "dell_chassis_temp_default_levels") )
        return inventory

def check_dell_chassis_temp(item, params, info):

    warn, crit = params

    items = {
                "Front Panel"  : 0,
                "CMC Ambient"  : 1,
                "CMC Processor": 2,
    }
    item_id = items.get(item, None)

    if item_id in ( 0, 1, 2 ):

        temp = savefloat(info[0][item_id])

        if temp >= crit:
            state = 2
        elif temp >= warn:
            state = 1
        else:
            state = 0

        infotext = "%.1fC (warn/crit: %.0fC/%.0fC)" % (temp,warn,crit)
        perfdata = [( "temp", str(temp)+"C", warn, crit, "", 100 )]

        return state, infotext, perfdata

    else:
        return 3, "no such temperature"

check_info["dell_chassis_temp"] = {
    "check_function"        : check_dell_chassis_temp,
    "inventory_function"    : inventory_dell_chassis_temp,
    "service_description"   : "%s Temperature",
    "has_perfdata"          : True,
    "group"                 : "hw_temperature",
    "snmp_info"             : ( ".1.3.6.1.4.1.674.10892.2.3.1", [
                                      "10", # drsChassisFrontPanelAmbientTemperature
                                      "11", # drsCMCAmbientTemperature
                                      "12", # drsCMCProcessorTemperature
                              ]),
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == ".1.3.6.1.4.1.674.10892.2",
}

