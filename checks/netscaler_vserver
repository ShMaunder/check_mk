#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#

netscaler_vserver_states = {
    0: ("unknown", 1),
    1: ("down", 2),
    2: ("unknown", 1),
    3: ("busy", 1),
    4: ("out of service", 1),
    5: ("transition to out of service", 1),
    7: ("up", 0),
}

netscaler_vserver_types = (
    "http",
    "ftp",
    "tcp",
    "udp",
    "sslBridge",
    "monitor",
    "monitorUdp",
    "nntp",
    "httpserver",
    "httpclient",
    "rpcserver",
    "rpcclient",
    "nat",
    "any",
    "ssl",
    "dns",
    "adns",
    "snmp",
    "ha",
    "monitorPing",
    "sslOtherTcp",
    "aaa",
    "secureMonitor",
    "sslvpnUdp",
    "rip",
    "dnsClient",
    "rpcServer",
    "rpcClient",
    "serviceUnknown",
)

def inventory_netscaler_vserver(info):
    for line in info:
        if line[0]:
            yield line[0], None

def check_netscaler_vserver(item, _no_params, info):
    for line in info:
        if line[0] == item:
            name, ip, port, srv_type, srv_state = line
            infotext = "State: %s, Type: %s, Socket:%s:%s" % \
                (netscaler_vserver_states[int(srv_state)][0], netscaler_vserver_types[int(srv_type)], ip, port)
            state = netscaler_vserver_states[int(srv_state)][1]
            return state, infotext

check_info["netscaler_vserver"] = {
    "check_function"          : check_netscaler_vserver,
    "inventory_function"      : inventory_netscaler_vserver,
    "service_description"     : "VServer %s",
    "snmp_info"               : (".1.3.6.1.4.1.5951.4.1.3.1.1", [ # nsVserverGroup.vserverTable.vserverEntry
                                            1, # vsvrName
                                            2, # vsvrIpAddress
                                            3, # vsvrPort
                                            4, # vsvrType
                                            5, # vsvrState
                                        ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
