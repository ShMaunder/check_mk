#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_ups_outphase(item, params, parsed):

    def tostring(value):
        if type(value) == int:
            return "%d" % value
        else:
            return "%.1f" % value

    if "voltage" in parsed[item]:
        volt = parsed[item]["voltage"]
        infotext = "Voltage: %s V" % tostring(volt)
        if "voltage" in params:
            warn, crit = params["voltage"]
            levelstext = " (warn/crit below %s/%s V)" % (tostring(warn), tostring(crit))
            perfdata = [ ("voltage", volt, warn, crit) ]
            if volt < crit:
                status = 2
                infotext += levelstext
            elif volt < warn:
                status = 1
                infotext += levelstext
            else:
                status = 0
        else:
            status = 0
            perfdata = [ ("voltage", volt) ]

        yield status, infotext, perfdata

    # Current is currently purely informative and does not support setting levels
    if "current" in parsed[item]:
        current = parsed[item]["current"]
        perfdata = [ ("current", current) ]
        infotext = "Current: %s A" % tostring(current)

        yield 0, infotext, perfdata

    if "load" in parsed[item]:
        load = parsed[item]["load"]
        infotext = "Load: %s%%" % tostring(load)
        if "load" in params:
            warn, crit = params["load"]
            levelstext = " (warn/crit at %s/%s%%)" % (tostring(warn), tostring(crit))
            perfdata = [ ("load", load, warn, crit) ]
            if load >= crit:
                status = 2
                infotext += levelstext
            elif load >= warn:
                status = 1
                infotext += levelstext
            else:
                status = 0

        else:
            status = 0
            perfdata = [ ("load", load) ]

        yield status, infotext, perfdata
