#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_elphase(parsed):
    for item in parsed.keys():
        yield item, {}


# Parsed has the following form:
# parsed = {
#    "Phase 1" : {
#        "voltage" : (220.17, (1, "Voltage is too low")), # with device state
#        "current" : 12.0,                                # without device state
#     }
# }
def check_elphase(item, params, parsed):

    def tostring(value):
        if type(value) == int:
            return "%d" % value
        else:
            return "%.1f" % value

    for what, title, unit, lower_is_good in [
        ( "voltage",        "Voltage",        " V",  False,),
        ( "current",        "Current",        " A",  True, ),
        ( "output_load",    "Load",           "%",   True, ),
        ( "power",          "Power",          " W",  True, ),
        ( "appower",        "Apparent Power", " W",  True  ),
        ( "energy",         "Energy",         " Wh", True ),
    ]:

        if what in parsed[item]:
            entry = parsed[item][what]
            if type(entry) == tuple:
                value, state_info = entry # (220.17, (1, "Voltage is too low"))
            else:
                value = entry             # 12.0
                state_info = None
            infotext = "%s: %s%s" % (title, tostring(value), unit)

            status = 0
            if what in params:
                warn, crit = params[what]
                levelstext = " (warn/crit %s %s/%s%s)" % (
                        (lower_is_good and "at" or "below"), tostring(warn), tostring(crit), unit)
                perfdata = [ (what, value, warn, crit) ]
                if (value < crit) != lower_is_good:
                    status = 2
                    infotext += levelstext
                elif (value < warn) != lower_is_good:
                    status = 1
                    infotext += levelstext

            else:
                perfdata = [ (what, value) ]

            yield status, infotext, perfdata
            if state_info:
                yield state_info
