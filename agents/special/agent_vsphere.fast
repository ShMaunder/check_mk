#!/usr/bin/python
# encoding: utf-8
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# This agent version uses predefined soap inquiries which are sent
# to an esx host system. # Unlike the classic agent the reported data 
# isn't processed through the pysphere module.
# Instead a simple string process approach is used which drastically
# reduces the CPU load for this agent

# Usage:
# Replace the classic agent_vsphere with this file

# Note: This agent is still in development

import httplib, pprint, sys, os, getopt, socket, time

#execfile("soap_commands.py", globals(), globals())


# List of predefined SOAP requests
# ( [{used_by_object}], {internal_id}, {SOAP telegram} )
soapdata_list = [
            (["required"],      "1_serviceinfo", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrieveServiceContent xsi:type="ns1:RetrieveServiceContentRequestType"><ns1:_this type="ServiceInstance">ServiceInstance</ns1:_this></ns1:RetrieveServiceContent></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["required"],      "2_login", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:Login xsi:type="ns1:LoginRequestType"><ns1:_this type="SessionManager">ha-sessionmgr</ns1:_this><ns1:userName>###user###</ns1:userName><ns1:password>###secret###</ns1:password></ns1:Login></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["required"],      "3_hostsystem_name", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrievePropertiesEx xsi:type="ns1:RetrievePropertiesExRequestType"><ns1:_this type="PropertyCollector">ha-property-collector</ns1:_this><ns1:specSet><ns1:propSet><ns1:type>HostSystem</ns1:type><ns1:pathSet>name</ns1:pathSet></ns1:propSet><ns1:objectSet><ns1:obj type="Folder">ha-folder-root</ns1:obj><ns1:skip>false</ns1:skip><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>visitFolders</ns1:name><ns1:type>Folder</ns1:type><ns1:path>childEntity</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToHf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToVmf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToH</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToDs</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>hToVm</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToVmf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>vmFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToDs</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>datastore</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToHf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>hostFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToH</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>host</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToRp</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToRp</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>hToVm</ns1:name><ns1:type>HostSystem</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToVm</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet></ns1:objectSet></ns1:specSet><ns1:options></ns1:options></ns1:RetrievePropertiesEx></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["datastore"],     "4_datastores", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrievePropertiesEx xsi:type="ns1:RetrievePropertiesExRequestType"><ns1:_this type="PropertyCollector">ha-property-collector</ns1:_this><ns1:specSet><ns1:propSet><ns1:type>Datastore</ns1:type><ns1:pathSet>name</ns1:pathSet><ns1:pathSet>summary.freeSpace</ns1:pathSet><ns1:pathSet>summary.capacity</ns1:pathSet><ns1:pathSet>summary.uncommitted</ns1:pathSet><ns1:pathSet>summary.url</ns1:pathSet><ns1:pathSet>summary.accessible</ns1:pathSet><ns1:pathSet>summary.type</ns1:pathSet><ns1:pathSet>summary.maintenanceMode</ns1:pathSet></ns1:propSet><ns1:objectSet><ns1:obj type="Folder">ha-folder-root</ns1:obj><ns1:skip>false</ns1:skip><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>visitFolders</ns1:name><ns1:type>Folder</ns1:type><ns1:path>childEntity</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToHf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToVmf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToH</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToDs</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>hToVm</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToVmf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>vmFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToDs</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>datastore</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToHf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>hostFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToH</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>host</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToRp</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToRp</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>hToVm</ns1:name><ns1:type>HostSystem</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToVm</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet></ns1:objectSet></ns1:specSet><ns1:options></ns1:options></ns1:RetrievePropertiesEx></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
#            ([],                "5_retrieve_ex_3", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrievePropertiesEx xsi:type="ns1:RetrievePropertiesExRequestType"><ns1:_this type="PropertyCollector">ha-property-collector</ns1:_this><ns1:specSet><ns1:propSet><ns1:type>PerformanceManager</ns1:type><ns1:all>true</ns1:all></ns1:propSet><ns1:objectSet><ns1:obj type="PerformanceManager">ha-perfmgr</ns1:obj><ns1:skip>false</ns1:skip></ns1:objectSet></ns1:specSet><ns1:options></ns1:options></ns1:RetrievePropertiesEx></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
#            ([],                "6_query_perf_provider_summary", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:QueryPerfProviderSummary xsi:type="ns1:QueryPerfProviderSummaryRequestType"><ns1:_this type="PerformanceManager">ha-perfmgr</ns1:_this><ns1:entity type="HostSystem">ha-host</ns1:entity></ns1:QueryPerfProviderSummary></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
#            ([],                "7_query_avail_perf_metric", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:QueryAvailablePerfMetric xsi:type="ns1:QueryAvailablePerfMetricRequestType"><ns1:_this type="PerformanceManager">ha-perfmgr</ns1:_this><ns1:entity type="HostSystem">ha-host</ns1:entity><ns1:intervalId>20</ns1:intervalId></ns1:QueryAvailablePerfMetric></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["counters"],      "8_perf_counter_syntax", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:QueryPerfCounter xsi:type="ns1:QueryPerfCounterRequestType"><ns1:_this type="PerformanceManager">ha-perfmgr</ns1:_this><ns1:counterId>262144</ns1:counterId><ns1:counterId>131078</ns1:counterId><ns1:counterId>131079</ns1:counterId><ns1:counterId>131091</ns1:counterId><ns1:counterId>131076</ns1:counterId><ns1:counterId>131077</ns1:counterId><ns1:counterId>196616</ns1:counterId><ns1:counterId>196621</ns1:counterId><ns1:counterId>196617</ns1:counterId><ns1:counterId>196625</ns1:counterId><ns1:counterId>196619</ns1:counterId><ns1:counterId>196623</ns1:counterId><ns1:counterId>196609</ns1:counterId><ns1:counterId>196614</ns1:counterId><ns1:counterId>196620</ns1:counterId><ns1:counterId>196624</ns1:counterId><ns1:counterId>196615</ns1:counterId><ns1:counterId>196622</ns1:counterId><ns1:counterId>196618</ns1:counterId><ns1:counterId>196612</ns1:counterId><ns1:counterId>196613</ns1:counterId><ns1:counterId>196626</ns1:counterId></ns1:QueryPerfCounter></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["counters"],      "9_perf_counter_data", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:QueryPerf xsi:type="ns1:QueryPerfRequestType"><ns1:_this type="PerformanceManager">ha-perfmgr</ns1:_this><ns1:querySpec><ns1:entity type="HostSystem">ha-host</ns1:entity><ns1:maxSample>1</ns1:maxSample><ns1:metricId><ns1:counterId>131078</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196614</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196614</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196614</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196614</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196614</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196612</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196613</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>262144</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196613</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196613</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196613</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196613</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196625</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196625</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196625</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196625</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196616</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196616</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196616</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196616</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196619</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196619</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196619</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196619</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196620</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196626</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196626</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196626</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196626</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196621</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131079</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196626</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196622</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196624</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196625</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196620</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196617</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196617</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196617</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196617</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196615</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196615</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196615</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196615</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196615</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196616</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196617</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196618</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196619</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131079</ns1:counterId><ns1:instance>naa.600605b002db9f7018d0a40c2a1444b0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196622</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131078</ns1:counterId><ns1:instance>naa.600605b002db9f7018d0a40c2a1444b0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196623</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131077</ns1:counterId><ns1:instance>naa.600605b002db9f7018d0a40c2a1444b0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196623</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196609</ns1:counterId><ns1:instance></ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196621</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196612</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196612</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196612</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196612</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196609</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196609</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196609</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196609</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196624</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196624</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196624</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196624</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131091</ns1:counterId><ns1:instance>naa.600605b002db9f7018d0a40c2a1444b0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>131076</ns1:counterId><ns1:instance>naa.600605b002db9f7018d0a40c2a1444b0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196618</ns1:counterId><ns1:instance>vmnic0</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196618</ns1:counterId><ns1:instance>vmnic1</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196618</ns1:counterId><ns1:instance>vmnic2</ns1:instance></ns1:metricId><ns1:metricId><ns1:counterId>196618</ns1:counterId><ns1:instance>vmnic3</ns1:instance></ns1:metricId><ns1:intervalId>20</ns1:intervalId></ns1:querySpec></ns1:QueryPerf></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["hostsystem"],    "10_hostsystem", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrievePropertiesEx xsi:type="ns1:RetrievePropertiesExRequestType"><ns1:_this type="PropertyCollector">ha-property-collector</ns1:_this><ns1:specSet><ns1:propSet><ns1:type>HostSystem</ns1:type><ns1:pathSet>summary.quickStats.overallMemoryUsage</ns1:pathSet><ns1:pathSet>hardware.cpuInfo.numCpuThreads</ns1:pathSet><ns1:pathSet>runtime.powerState</ns1:pathSet><ns1:pathSet>summary.quickStats.overallCpuUsage</ns1:pathSet><ns1:pathSet>hardware.cpuInfo.hz</ns1:pathSet><ns1:pathSet>hardware.cpuInfo.numCpuPackages</ns1:pathSet><ns1:pathSet>config.multipathState.path</ns1:pathSet><ns1:pathSet>hardware.cpuInfo.numCpuCores</ns1:pathSet><ns1:pathSet>name</ns1:pathSet><ns1:pathSet>overallStatus</ns1:pathSet><ns1:pathSet>runtime.healthSystemRuntime.systemHealthInfo.numericSensorInfo</ns1:pathSet><ns1:pathSet>runtime.inMaintenanceMode</ns1:pathSet><ns1:pathSet>hardware.memorySize</ns1:pathSet></ns1:propSet><ns1:objectSet><ns1:obj type="Folder">ha-folder-root</ns1:obj><ns1:skip>false</ns1:skip><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>visitFolders</ns1:name><ns1:type>Folder</ns1:type><ns1:path>childEntity</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToHf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToVmf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToH</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToDs</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>hToVm</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToVmf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>vmFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToDs</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>datastore</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToHf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>hostFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToH</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>host</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToRp</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToRp</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>hToVm</ns1:name><ns1:type>HostSystem</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToVm</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet></ns1:objectSet></ns1:specSet><ns1:options></ns1:options></ns1:RetrievePropertiesEx></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["virtualmachine"],"11_virtualmachine", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:RetrievePropertiesEx xsi:type="ns1:RetrievePropertiesExRequestType"><ns1:_this type="PropertyCollector">ha-property-collector</ns1:_this><ns1:specSet><ns1:propSet><ns1:type>VirtualMachine</ns1:type><ns1:pathSet>summary.quickStats.consumedOverheadMemory</ns1:pathSet><ns1:pathSet>config.hardware.numCPU</ns1:pathSet><ns1:pathSet>summary.quickStats.overallCpuDemand</ns1:pathSet><ns1:pathSet>summary.quickStats.distributedCpuEntitlement</ns1:pathSet><ns1:pathSet>runtime.host</ns1:pathSet><ns1:pathSet>summary.quickStats.distributedMemoryEntitlement</ns1:pathSet><ns1:pathSet>summary.quickStats.uptimeSeconds</ns1:pathSet><ns1:pathSet>summary.quickStats.sharedMemory</ns1:pathSet><ns1:pathSet>config.hardware.memoryMB</ns1:pathSet><ns1:pathSet>summary.quickStats.privateMemory</ns1:pathSet><ns1:pathSet>summary.quickStats.balloonedMemory</ns1:pathSet><ns1:pathSet>summary.quickStats.staticMemoryEntitlement</ns1:pathSet><ns1:pathSet>runtime.powerState</ns1:pathSet><ns1:pathSet>summary.quickStats.overallCpuUsage</ns1:pathSet><ns1:pathSet>config.hardware.numCoresPerSocket</ns1:pathSet><ns1:pathSet>guest.toolsVersion</ns1:pathSet><ns1:pathSet>guestHeartbeatStatus</ns1:pathSet><ns1:pathSet>name</ns1:pathSet><ns1:pathSet>summary.quickStats.compressedMemory</ns1:pathSet><ns1:pathSet>summary.quickStats.swappedMemory</ns1:pathSet><ns1:pathSet>summary.quickStats.guestMemoryUsage</ns1:pathSet><ns1:pathSet>summary.quickStats.staticCpuEntitlement</ns1:pathSet><ns1:pathSet>summary.quickStats.hostMemoryUsage</ns1:pathSet><ns1:pathSet>guest.toolsVersionStatus</ns1:pathSet></ns1:propSet><ns1:objectSet><ns1:obj type="Folder">ha-folder-root</ns1:obj><ns1:skip>false</ns1:skip><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>visitFolders</ns1:name><ns1:type>Folder</ns1:type><ns1:path>childEntity</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToHf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToVmf</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToH</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>crToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>dcToDs</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>hToVm</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToVmf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>vmFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToDs</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>datastore</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>dcToHf</ns1:name><ns1:type>Datacenter</ns1:type><ns1:path>hostFolder</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToH</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>host</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>crToRp</ns1:name><ns1:type>ComputeResource</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToRp</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>resourcePool</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>rpToRp</ns1:name></ns1:selectSet><ns1:selectSet><ns1:name>rpToVm</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>hToVm</ns1:name><ns1:type>HostSystem</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip><ns1:selectSet><ns1:name>visitFolders</ns1:name></ns1:selectSet></ns1:selectSet><ns1:selectSet xsi:type="ns1:TraversalSpec"><ns1:name>rpToVm</ns1:name><ns1:type>ResourcePool</ns1:type><ns1:path>vm</ns1:path><ns1:skip>false</ns1:skip></ns1:selectSet></ns1:objectSet></ns1:specSet><ns1:options></ns1:options></ns1:RetrievePropertiesEx></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
            (["required"],      "12_logout", '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ZSI="http://www.zolera.com/schemas/ZSI/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body xmlns:ns1="urn:vim25"><ns1:Logout xsi:type="ns1:LogoutRequestType"><ns1:_this type="SessionManager">ha-sessionmgr</ns1:_this></ns1:Logout></SOAP-ENV:Body></SOAP-ENV:Envelope>'),
           ]

def usage():
    sys.stderr.write("""Check_MK vSphere Agent

USAGE: agent_vsphere [OPTIONS] HOST
       agent_vsphere -h

ARGUMENTS:
  HOST                          Host name or IP address of VMWare HostSystem

OPTIONS:
  -h, --help                    Show this help message and exit
  -u USER, --user USER          Username for vSphere login
  -s SECRET, --secret SECRET    Secret/Password for vSphere login
  -H, --hostname                Specify a hostname. This is neccessary if this is
                                different from HOST. It is being used when outputting
                                the hosts power state.
  -a, --agent                   Also retrieve data from the normal Check_MK Agent.
                                This makes sense if you query a vCenter that is
                                Installed on a Windows host that you also want to
                                Monitor with Check_MK.
  -t, --timeout SECS            Set the network timeout to vSphere to SECS seconds.
                                This is also used when connecting the agent (option -a).
                                Default is 60 seconds. Note: the timeout is not only
                                applied to the connection, but also to each individual
                                subquery.
  --debug                       Debug mode: let Python exceptions come through

  -i MODULES, --modules MODULES Modules to query. This is a comma separated list of
                                hostsystem, virtualmachine and storage. Default is to
                                query all modules.

  -c, --dump-counters           Simply dumping out all available counters and their values.
                                This mode is meant for debugging and diagnostic purposes.

""")

short_options = 'hi:u:s:Dat:H:c'
long_options  = [
    'help', 'user=', 'secret=', 'direct', 'agent', 'debug', 'modules=', 'timeout=', 'hostname=',
    'dump-counters',
]

opt_debug         = False
opt_direct        = False
opt_agent         = False
opt_dump_counters = False
opt_timeout       = 60
opt_hostname      = None

error = None
error_exit = 1

host_address  = None
user          = None
secret        = None
query_objects = [ 'hostsystem', 'virtualmachine', 'datastore', 'counters', 'required' ]

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError, err:
    sys.stderr.write("%s\n" % err)
    sys.exit(1)

for o,a in opts:
    if o in [ '--debug' ]:
        opt_debug = True
    elif o in [ '-D', '--direct' ]:
        opt_direct = True
    elif o in [ '-a', '--agent' ]:
        opt_agent = True
    elif o in [ '-u', '--user' ]:
        user = a
    elif o in [ '-s', '--secret' ]:
        secret = a
    elif o in [ '-i', '--modules' ]:
        query_objects = a.split(',') + [ "required" ]
    elif o in [ '-t', '--timeout' ]:
        opt_timeout = int(a)
    elif o in [ '-H', '--hostname' ]:
        opt_hostname = a
    elif o in [ '-c', '--dump-counters' ]:
        opt_dump_counters = True
    elif o in [ '-h', '--help' ]:
        usage()
        sys.exit(0)

if len(args) == 1:
    host_address = args[0]
elif not args:
    sys.stderr.write("ERROR: No host given.\n")
    sys.exit(1)
else:
    sys.stderr.write("ERROR: Please specify exactly one host.\n")
    sys.exit(1)


socket.setdefaulttimeout(opt_timeout)

def get_agent_info_tcp(hostname):
    output = ""
    try:
        if hostname[0] in "123456789":
            ipaddress = hostname
        else:
            ipaddress = socket.gethostbyname(hostname)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.settimeout(opt_timeout)
        except:
            pass # some old Python versions lack settimeout(). Better ignore than fail
        s.connect((ipaddress, 6556))
        try:
            s.setblocking(1)
        except:
            pass
        output = ""
        while True:
            out = s.recv(4096, socket.MSG_WAITALL)
            if out and len(out) > 0:
                output += out
            else:
                break
        s.close()
        return output
    except Exception, e:
        if opt_debug:
            raise
    return output

if opt_agent:
    sys.stdout.write(get_agent_info_tcp(host_address))
    sys.stdout.flush()
    error_exit = 0

results = {}

# Debugging stuff
query_duration = 0
query_start = 0

try:
    my_cookie   = None
    netloc      = host_address
    request_uri = "/sdk"
    transport   = httplib.HTTPSConnection
    transdict   = {'timeout': opt_timeout}
    handle      = transport(netloc, None, **transdict)
    handle.connect()

    if opt_debug:
        sys.stderr.write("Connecting to %s..." % host_address)
        sys.stderr.flush()

    start = time.time()

    for (used_by, name, soapdata) in soapdata_list:
        # Only sent queries we actually need
        for item in used_by:
            if item in query_objects:
                break
        else:
            continue
        soapdata = soapdata.replace("###user###", user).replace("###secret###", secret)
        handle.putrequest("POST", request_uri)
        handle.putheader("Content-Length", "%d" % len(soapdata))
        handle.putheader("Content-Type", 'text/xml; charset="utf-8"')
        handle.putheader("SOAPAction", "urn:vim25/5.0")
        handle.putheader("User-Agent", "VMware VI Client/5.0.0")
        if my_cookie:
            handle.putheader("Cookie", my_cookie)

        handle.endheaders()
        handle.send(soapdata)

        response = handle.getresponse()
        reply_code, reply_msg, reply_headers, reply_data = \
        response.status, response.reason, response.msg, response.read()

        if name == "2_login":
            my_cookie =  reply_headers.get("Set-Cookie")

        results[name] = reply_data

    query_duration = time.time() - start

except Exception, e:
    if opt_debug:
        raise
    error = "Cannot connect to vSphere Server. Maybe you provided wrong " \
            "credentials. Please check your connection settings and try " \
            "again."

# Debugging
#try:
#    os.mkdir("results")
#except:
#    pass
#
#for name, value in results.items():
#    file("results/%s.%s" % (host, name), "w").write(value)

if not error:
    try:

        def get_value(line):
            return line.split(">")[1]

        ##########################
        # Check MK header an Agent Version
        print   "<<<check_mk>>>"
        lines = results["1_serviceinfo"].replace("<", "\n<").splitlines()
        for line in lines:
            if line.startswith("<version>"):
                print "Version: %s" % get_value(line)
            elif line.startswith("<name>"):
                print "AgentOs: %s" % get_value(line)

        #############################
        # Hostsystem instance to name
        #############################
        hostsystem_name = {}
        lines = results["3_hostsystem_name"].replace("<", "\n<").splitlines()
        hostsystem = ""
        for line in lines:
            if line.startswith('<obj type="HostSystem'):
                hostsystem = get_value(line)
                print "AgentOs: %s" % get_value(line)
            elif line.startswith('<val xsi:type="xsd:string">'):
                hostsystem_name[hostsystem] = get_value(line)

        ###########################
        # Datastores
        ###########################
        if "datastore" in query_objects:
            lines = results["4_datastores"].replace("<", "\n<").splitlines()

            datastores = {}
            entry = None
            current_datastore = None
            for line in lines:
                if line.startswith('<obj type="Datastore">'):
                    current_datastore = get_value(line)
                    datastores[current_datastore] = {}
                elif line.startswith("<name>"):
                    entry = get_value(line)
                elif line.startswith("<val xsi:type"):
                    datastores[current_datastore][entry] = get_value(line)

            print "<<<esx_vsphere_datastores:sep(9)>>>"
            for key in sorted(datastores.keys()):
                data = datastores[key]
                print "[%s]" % data.get("name")
                del data["name"]
                for ds_key in sorted(data.keys()):
                    print "%s\t%s" % (ds_key.split(".")[1], data[ds_key])

        ###########################
        # Counters
        ###########################
        if "counters" in query_objects:
            lines = results["8_perf_counter_syntax"].replace("<", "\n<").splitlines()

            counters_syntax = {}
            current_key     = None

            add_name_fctn  = lambda x: counters_syntax[current_key].update({"name":  x})
            add_group_fctn = lambda x: counters_syntax[current_key].update({"group": x})
            add_unit_fctn  = lambda x: counters_syntax[current_key].update({"unit":  x})
            add_key_fctn   = None

            for line in lines:
                if line.startswith("<key>"):
                    key_value = get_value(line)
                    if add_key_fctn == None:
                        current_key = key_value
                        counters_syntax[key_value] = {}
                    else:
                        add_key_fctn(key_value)

                if line.startswith("<nameInfo>"):
                    add_key_fctn = add_name_fctn
                elif line.startswith("<groupInfo>"):
                    add_key_fctn = add_group_fctn
                elif line.startswith("<unitInfo>"):
                    add_key_fctn = add_unit_fctn
                elif line.startswith("</returnval>"):
                    add_key_fctn = None


            lines          = results["9_perf_counter_data"].replace("<", "\n<").splitlines()
            counters_value = {}
            for line in lines:
                if line.startswith("<counterId>"):
                    counter_id = get_value(line)
                elif line.startswith("<instance>"):
                    instance_id = get_value(line)
                elif line.startswith("<value>"):
                    if counter_id in counters_syntax:
                        counters_value["%s.%s" % (counter_id, instance_id)] = { "id": counter_id, "instance": instance_id, "value": get_value(line) }

            print "<<<esx_vsphere_counters:sep(124)>>>"
            counters_output = {}
            for key in sorted(counters_value.keys()):
                value = counters_value[key]
                desc  = counters_syntax[value["id"]]
                counters_output[ (desc["group"], desc["name"], value["instance"]) ] = ( value["value"], desc["unit"] )

            for key in sorted(counters_output.keys()):
                value = counters_output[key]
                print "%s.%s|%s|%s|%s" % (key + value)
                                        #(desc["group"], desc["name"], 
                                        #  value["instance"], value["value"], desc["unit"])

        ###########################
        # Hostsystem
        ###########################
        if "hostsystem" in query_objects:
            lines = results["10_hostsystem"].replace("<", "\n<").splitlines()

            hostsystem_propsets = {}
            current_propset     = None

            hostsystem_sensors  = {}
            current_sensor_info = None
            for line in lines:
                if line.startswith("<propSet>"):
                    current_propset = None
                    if current_sensor_info:
                        hostsystem_sensors[current_sensor_info["name"]] = current_sensor_info
                        current_sensor_info = None

                if current_sensor_info != None:
                    for key in [ "name", "label", "summary", "key", "currentReading", 
                                 "unitModifier", "baseUnits", "sensorType", "rateUnits" ]:
                        if line.startswith("<%s>" % key):
                            current_sensor_info[key] = get_value(line)
                            break

                if line.startswith('<HostNumericSensorInfo xsi:type="HostNumericSensorInfo">'):
                    if current_sensor_info:
                        hostsystem_sensors[current_sensor_info["name"]] = current_sensor_info
                    current_sensor_info = {}
                    continue

                if line.startswith("<name>") or line.startswith("<pathState>"):
                    if current_propset:
                        hostsystem_propsets[current_propset].append(get_value(line))
                    else:
                        current_propset = get_value(line)
                        hostsystem_propsets[current_propset] = []
                elif line.startswith("<val xsi:type"):
                    hostsystem_propsets[current_propset].append(get_value(line))

            print "<<<esx_vsphere_hostsystem>>>"
            for key in sorted(hostsystem_propsets.keys()):
                if key == "runtime.healthSystemRuntime.systemHealthInfo.numericSensorInfo":
                    continue
                value = hostsystem_propsets[key]
                print "%s %s" % (key, " ".join(value))

            print "<<<esx_vsphere_sensors:sep(59)>>>"
            for key in sorted(hostsystem_sensors.keys()):
                data = hostsystem_sensors[key]
                if data["key"] in ["green", "unknown"]:
                    continue
                line = '%s;%s;%s;%s;%s;' % (data["name"], data["baseUnits"], data["currentReading"],
                                            data["sensorType"], data["unitModifier"])
                if "rateUnits" in data:
                    line += data["rateUnits"]
                line += ";%s;%s;%s" % ( data["key"], data["label"], data["summary"] )
                print line

        ###########################
        # Virtual machines
        ###########################
        if "virtualmachine" in query_objects:
            vms = {}
            lines = results["11_virtualmachine"].replace("<", "\n<").splitlines()
            for line in lines:
                if line.startswith('<obj type="VirtualMachine"'):
                    vm_id = get_value(line)
                    vm = {}
                    vms[vm_id] = vm
                elif line.startswith('<name>'):
                    name = get_value(line)
                elif line.startswith('<val'):
                    value = get_value(line)
                    vm[name] = value


            for key in sorted(vms.keys()):
                data = vms[key]
                if data.get("name"):
                    print "<<<<%s>>>>" % data.get("name")
                    print "<<<esx_vsphere_vm>>>"
                    entries = list(data.items())
                    entries.sort()
                    for entry in entries:
                        print "%s %s" % entry


        print "<<<<>>>>"
        print "<<<esx_vsphere_objects:sep(9)>>>"
        if "hostsystem" in query_objects:
            print "hostsystem\t%s\t\t%s" % ( opt_hostname or host_address, "".join(hostsystem_propsets["runtime.powerState"]) )

        if "virtualmachine" in query_objects:
            for key in sorted(vms.keys()):
                data = vms[key]
                running_on = hostsystem_name.get(data.get("runtime.host"), data.get("runtime.host"))
                print "virtualmachine\t%s\t%s\t%s" % (data.get("name").replace(" ","_"), running_on, data.get("runtime.powerState"))

        #print "query", query_duration
        #print "processing", time.time() - start - query_duration
    except Exception, e:
        if opt_debug:
            raise
        error = "Error while processing received data"

if error:
    sys.stderr.write(error + "\n")
    sys.exit(error_exit)
