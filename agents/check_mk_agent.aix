#!/usr/bin/ksh93
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR="/to/be/changed"
export MK_CONFDIR="/to/be/changed"

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local

#Avoid problems with wrong decimal separators in other language verions of aix
export LC_NUMERIC="en_US"

# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec <&- 2>/dev/null
fi

# Shell version of the waitmax utility, that limits the runtime of
# commands. This version does not conserve the original exit code
# of the command. It is successfull if the command terminated
# in time.
function waitmax
{
   TIMEOUT=${1}0
   SIGNAL=9
   shift

   # Run command in background
   ksh -c "$*" &
   PID=$!

   # Wait for termination within TIMOUT seconds
   while [ $TIMEOUT -gt 0 ]
   do
       TIMEOUT=$((TIMEOUT - 1))
       if [ ! -e /proc/$PID ] ; then
           return 0
       fi
       perl -e "select(undef, undef, undef, 0.1);"
   done

   # Process did not terminate in time. Kill and
   # return with an error
   kill -9 $PID
   return 255
}

echo '<<<check_mk>>>'
echo Version: 1.2.5i6
echo AgentOS: aix

echo '<<<df>>>'
df -kP | sed 's/ / - /' | grep -v ^/proc | grep -v ^Filesystem | grep -v :

# Check for hanging NFS mounts. This needs a GNU stat installed in the PATH
if type stat >/dev/null 2>&1 ; then
    echo '<<<nfsmounts>>>'
     mount | grep ' nfs' | awk '{print $3;}' | \
        while read MP
	do
	    waitmax 2 stat -f -c '"'$MP' ok - - - -"' "$MP" || \
		echo "$MP hanging 0 0 0 0"
	done
fi

echo '<<<ps>>>'
ps -ef -F user,vszsize,rssize,pcpu,args | sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4) /'

if type lparstat >/dev/null 2>&1
then
  echo '<<<lparstat_aix>>>'
  lparstat 1 1 | tail -n1
fi

echo '<<<vmstat_aix>>>'
vmstat | tail -n1

echo '<<<aix_diskiod>>>'
iostat -d | tr -s ' ' | grep hdisk

echo '<<<aix_memory>>>'
vmstat -v  | tr -s ' '
swap -s

echo '<<<mpstat_aix>>>'
mpstat -a | tail -n1

# CPU output of Linux agent simulated
# (thanks to Cameron Pierce)
echo '<<<cpu>>>'
load=`uptime|sed -e 's;.*average: \([[:digit:]]\{1,\}\.[[:digit:]]\{1,\}\), \([[:digit:]]\{1,\}\.[[:digit:]]\{1,\}\), \([[:digit:]]\{1,\}\.[[:digit:]]\{1,\}\);\1 \2 \3;'`
ps=`ps -eo thcount | awk '{SUM+=$1} END {print SUM}'`
procs=`vmstat|grep lcpu|sed -e 's;.* lcpu=\([[:digit:]]\{1,4\}\) .*;\1;'`
echo $load 1/$ps $$ $procs


# The following section has been contributed by Joerg Linge
echo "<<<lnx_if:sep(58)>>>"
for ent in $(ifconfig -a | grep '^en' | cut -d ":" -f 1)
do
    bytes=$(entstat $ent | grep ^Bytes: | awk '{printf "%s %s", $2, $4}')
    bytes_rx=$(echo $bytes | awk '{print $2'})
    bytes_tx=$(echo $bytes | awk '{print $1'})
    packets=$(entstat $ent | grep ^Packets: | awk '{printf "%s %s", $2, $4}')
    packets_rx=$(echo $packets | awk '{print $2'})
    packets_tx=$(echo $packets | awk '{print $1'})
    errors_tx=$(entstat $ent | grep 'Transmit Errors:' | awk '{print $3'})
    errors_rx=$(entstat $ent | grep 'Receive Errors:'  | awk '{print $6'})
    echo "$ent: $bytes_rx $packets_rx $errors_rx 0 0 0 0 0 $bytes_tx $packets_tx $errors_tx 0 0 0 0 0"
done


if which ntpq > /dev/null 2>&1 ; then
    if [ $(lssrc -s xntpd|grep -c active) -gt 0 ] ; then
        echo '<<<ntp>>>'
        ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
    fi
fi


echo '<<<aix_multipath>>>'
    lspath -F"name parent status"

echo '<<<aix_lvm>>>'
    # -L disables LVM lock for the query. Avoids blocking while LVM is
    # doing changes. For rootvg that is fine.
    lsvg -L -l rootvg


echo '<<<tcp_conn_stats>>>'
netstat -ntfinet | awk ' /^tcp/ { c[$6]++; } END { for (x in c) { print x, c[x]; } }'

# Libelle Business Shadow
if type trd >/dev/null 2>&1
then
  echo '<<<libelle_business_shadow:sep(58)>>>'
  trd -s
fi


if cd $PLUGINSDIR 2>/dev/null
then
    for skript in $(ls)
    do
        if [ -x "$skript" ] ; then
            ./$skript
    fi
  done
fi


echo '<<<local>>>'
if cd $LOCALDIR 2>/dev/null
then
  for skript in $(ls)
  do
    if [ -x "$skript" ] ; then
        ./$skript
    fi
  done
fi

# MK's Remote Plugin Executor
if [ -e "$MK_CONFDIR/mrpe.cfg" ]
then
    echo '<<<mrpe>>>'
    grep -Ev '^[[:space:]]*($|#)' "$MK_CONFDIR/mrpe.cfg" | \
    while read descr cmdline
    do
        PLUGIN=${cmdline%% *}
        OUTPUT=$($cmdline)
        echo "(${PLUGIN##*/}) $descr $? $OUTPUT"
    done
fi
